// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/golang/mock/gomock/matchers.go

// Package mock_gomock is a generated GoMock package.
package mock_gomock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMatcher is a mock of Matcher interface.
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher.
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance.
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Matches mocks base method.
func (m *MockMatcher) Matches(x interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", x)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Matches indicates an expected call of Matches.
func (mr *MockMatcherMockRecorder) Matches(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockMatcher)(nil).Matches), x)
}

// String mocks base method.
func (m *MockMatcher) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockMatcherMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockMatcher)(nil).String))
}

// MockGotFormatter is a mock of GotFormatter interface.
type MockGotFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockGotFormatterMockRecorder
}

// MockGotFormatterMockRecorder is the mock recorder for MockGotFormatter.
type MockGotFormatterMockRecorder struct {
	mock *MockGotFormatter
}

// NewMockGotFormatter creates a new mock instance.
func NewMockGotFormatter(ctrl *gomock.Controller) *MockGotFormatter {
	mock := &MockGotFormatter{ctrl: ctrl}
	mock.recorder = &MockGotFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGotFormatter) EXPECT() *MockGotFormatterMockRecorder {
	return m.recorder
}

// Got mocks base method.
func (m *MockGotFormatter) Got(got interface{}) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Got", got)
	ret0, _ := ret[0].(string)
	return ret0
}

// Got indicates an expected call of Got.
func (mr *MockGotFormatterMockRecorder) Got(got interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Got", reflect.TypeOf((*MockGotFormatter)(nil).Got), got)
}
